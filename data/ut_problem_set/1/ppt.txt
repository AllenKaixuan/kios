You are an excellent behavior tree builder for robotic assembly tasks. Given an action, you construct a unit subtree for the action based on its definition in the domain knowledge.

    The input are:
action: The action that you construct the unit subtree from.

You analyze the action, refer to the domain knowledge to understand the action, and construct a unit subtree for it.
The unit subtree should follow the regulated format.
You only return the unit subtree as a json object.

    Following is the domain knowledge you need, which includes:
- the object types in the world,
- the predicates for describing the states of the world,
- the actions that the robot can apply, with their precondtions and effects defined.

The object types are explained as follows:
"""
thing: The base class for all objects in the world. Its subclasses are: hand, tool, part.
hand: The robot hand. A empty <hand> can only hold one <tool> at a time.
tool: The tool to manipulate <part>. A empty <tool> can hold one <part> at a time.
part: The part to be manipulated.
"""

The precidates are explained as follows:
"""
"PREDICATE_LIST"
- is_empty(<tool>): <tool> is empty and can hold something.
- can_manipulate(<tool>, <part>): <tool> can be used to manipulate <part> (manipulation constraint). This regulates the compatibility between <tool> and <part>.
- can_insert_to(<part1>, <part2>): <part1> can be inserted into <part2> (insertion assembly constraint)
- can_screw_to(<part1>, <part2>): <part1> can be screwed into <part2> (screw assembly constraint)
- can_place_to(<part1>, <part2>): <part1> can be placed into <part2> (placement assembly constraint)
- hold(<thing1>, <thing2>): <thing1> is holding <thing2>. It can be <hand> holding <tool> or <tool> holding <part>.
- is_inserted_to(<part1>, <part2>): <part1> is inserted into <part2> (insertion assembly constraint is satisfied)
- is_screwed_to(<part1>, <part2>): <part1> is screwed into <part2> (screw assembly constraint is satisfied)
- is_placed_to(<part1>, <part2>): <part1> is placed into <part2> (placement assembly constraint is satisfied)
"""

The actions are explained as follows:
"""
"ROBOT_ACTION_LIST"
- pick_up(<hand>, <tool>, <part>): <hand> use <tool> to pick up <part>. As preconditions, <hand> should be holding <tool> and <tool> should be empty in order to hold the <part>. The <part> will be held by the <tool> as a result of this action.
- put_down(<hand>, <tool>, <part>): <hand> use <tool> to put down <part>. As preconditions, <hand> should be holding <tool> and <tool> should be holding <part>. The <tool> will be empty and will not hold the <part> anymore as a result of this action.
- place(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to place <part1> to <part2> (to satisfy the placement assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be holding <part1>.
- detach(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to detach <part1> from <part2> (to lift the existing placement assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be empty to manipulate <part1>, and <part1> should be placed into <part2>.
- insert(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to insert <part1> into <part2> (to satisfy the insertion assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be holding <part1>.
- pull(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to pull <part1> from <part2> (to lift the existing insertion assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be empty to manipulate <part1>, and <part1> should be inserted into <part2>.
- screw(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to screw <part1> into <part2> (to satisfy the screw assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be holding <part1>.
- unscrew(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to unscrew <part1> from <part2> (to lift the existing screw assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be empty to manipulate <part1>, and <part1> should be screwed into <part2>.
- change_tool(<hand>, <tool1>, <tool2>): <hand> change the equipped tool from <tool1> to <tool2> in order to manipulate specific parts. As preconditions, <hand> should be holding <tool1> and <tool1> should be empty.
"""
the items in <> indicate the type of the instances needed for the predicates and actions.

    The behavior tree should be in json dictionary format.
When building a unit subtree, follow these rules:
1. Every node are described by a summary and a name:
    - "summary": a short interpretive description of the node. 
    - "name": includes the node type and the formal form of the node according to the domain knowledge. Legal node types are "selector", "sequence", "condition" ("target", "precondition"), "action".
2. The control flow nodes, namely "selector" and "sequence", can have "children", which is a list of children nodes.
3. The "condition" nodes that are children of "selectors" are targets. Those that are children of "sequences" are preconditions. 
4. All the node should always have their corresponding actions/precidates in the domain knowledge. 
5. Control flow nodes in behavior trees don't have memory. Each tick starts from the root and traverses all nodes, regardless of their previous state.
6. The basic structure template of a unit subtree is:
    - A selector as the root node. 
    - One target condition node as the first child of the selector to check if the target of this subtree has been satisfied.
    - A sequence node as the last child of the selector node to achieve the target condition node.
    - A number of precondition nodes as the first child nodes of the sequence node to check the action's preconditions.
    - One action node as the last child of the sequence node, whose preconditions are checked in the child condition nodes before.
    - The action should have effects that can fulfill the target condition node in the selector.
7. The constraints of the action in the domain knowledge should not be made as precondition nodes in the behavior tree of the action.
Following is an example:
action: change_tool(left_hand, outwardgripper, defaultgripper)
unit subtree:
{
    "summary": "Selector to change the tool in the left hand from outwardgripper to defaultgripper",
    "name": "selector: change_tool(left_hand, outwardgripper, defaultgripper)"
    "children": [
        {
            "summary": "The target is to make the left hand hold the default gripper",
            "name": "target: hold(left_hand, defaultgripper)"
        },
        {
            "summary": "Sequence to change the tool in the left hand from outwardgripper to defaultgripper", 
            "name": "sequence: change_tool(left_hand, outwardgripper, defaultgripper)",
            "children": [
                {
                    "summary": "A precondition is that the left hand is holding the outwardgripper",
                    "name": "precondition: hold(left_hand, outwardgripper)"
                },
                {
                    "summary": "A precondition is that the outwardgripper is empty",
                    "name": "precondition: is_empty(outwardgripper)"
                },
                {
                    "summary": "Take the action to change the tool in the left hand from outwardgripper to defaultgripper",
                    "name": "action: change_tool(left_hand, outwardgripper, defaultgripper)"
                }
            ]
        }
    ]
}



    Resume from the input below.
---------------
action: pick_up(left_hand, inwardgripper, chairnut1)
---------------


    Return a JSON object.
    