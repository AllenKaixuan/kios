Following is an input/output example.
Example 1:
"""
INPUT:
target: "insert the gear1 into the shaft1"
initial_state: {"objects": [
            {"name": "gear1", "properties": []},
            {"name": "shaft1", "properties": []},
            {"name": "parallel_box1", "properties": ["is_empty"]},
            {"name": "left_hand", "properties": []},
        ],
        "constraints": [
            {"source": "gear1", "name": "can_insert_to", "target": "shaft1"},
            {"source": "parallel_box1", "name": "can_manipulate", "target": "gear1"},
        ],
        "relations": [
            {"source": "left_hand", "name": "hold", "target": "parallel_box1"},
        ],
}
OUTPUT:
{
    "thought": "At the start, the left hand is holding the parallel_box1, and the parallel_box1 is empty. According to the constraints, the gear1 can be inserted to the shaft1, and the parallel_box1 can manipulate the gear1. So, the gear1 can be picked up with the parallel_box1 in the left hand, and then the precondition hold(parallel_box1, gear1) is satisfied. Finally, the gear1 can be inserted into the shaft1 with the parallel_box1 in the left hand.",
    "action_sequence": [
        "pick_up(left_hand, parallel_box1, gear1)",
        "insert(left_hand, parallel_box1, gear1, shaft1)"
    ],
    "behavior_tree": {
        "summary": "selector to insert the gear1 into the shaft1 with the parallel_box1 in the left hand",
        "name": "selector: insert(gear1, shaft1, parallel_box1, left_hand)",
        "children": [
            {
                "summary": "check the target that gear1 is inserted to shaft1",
                "name": "target: is_inserted_to(gear1, shaft1)"
            },
            {
                "summary": "sequence to insert the gear1 into the shaft1 with the parallel_box1 in the left hand",
                "name": "sequence: insert(gear1, shaft1, parallel_box1, left_hand)",
                "children": [
                    {
                        "summary": "check the precondition that the left hand is holding the parallel_box1",
                        "name": "precondition: hold(left_hand, parallel_box1)"
                    },      
                    {
                        "summary": "selector to pick_up the gear1 with the parallel_box1 in the left hand",
                        "name": "selector: pick_up(left_hand, parallel_box1, gear1)",
                        "children": [
                            {
                                "summary": "check the target that the parallel_box1 is holding the gear1",
                                "name": "target: hold(parallel_box1, gear1)"
                            },
                            {
                                "summary": "sequence to pick_up the gear1 with the parallel_box1 in the left hand",
                                "name": "sequence: pick_up(left_hand, parallel_box1, gear1)",
                                "children": [
                                    {
                                        "summary": "check the precondition that the parallel_box1 is empty",
                                        "name": "precondition: is_empty(parallel_box1)"
                                    },
                                    {
                                        "summary": "check the precondition that the left hand is holding the parallel_box1",
                                        "name": "precondition: hold(left_hand, parallel_box1)"
                                    },
                                    {
                                        "summary": "the action to pick_up the gear1 with the parallel_box1 in the left hand",
                                        "name": "action: pick_up(left_hand, parallel_box1, gear1)"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "summary": "the action to insert the gear1 into the shaft1 with the parallel_box1 in the left hand",
                        "name": "action: insert(left_hand, parallel_box1, gear1, shaft1)"
                    }
                ]
            }
        ]
    }
}

Example 2:
"""
- Input:
objects:
{
    "tool": ["parallel_box1", "inward_claw", "outward_claw"],
    "part": ["gear1", "shaft1", "gearbase_hole1", "gearbase_hole3"]
    "hand": ["left_hand"]
} 
runtime_world_state: 
{
    "objects": [
        {"name": "parallel_box1", "properties": ["is_free", "is_equippable"]},
        {"name": "inward_claw", "properties": ["is_free", "is_equippable"]},
        {"name": "outward_claw", "properties": ["is_free"]},
        {"name": "gear1", "properties": []},
        {"name": "shaft1", "properties": []},
        {"name": "gearbase_hole1", "properties": []},
        {"name": "left_hand", "properties": []}
    ],
    "constraints": [
        {"source": "parallel_box1", "name": "can_manipulate", "target": "gear1"},
        {"source": "gear1", "name": "can_insert_to", "target": "shaft1"},
    ],
    "relations": [
      {"source": "left_hand","name": "hold","target": "outward_claw"}
    ]
}
last_behavior_tree:
{
    "summary": "selector to load parallel_box1",
    "name": "selector: load_tool(left_hand, parallel_box1)",
    "identifier": 0,
    "children": [
        {
            "summary": "condition node to check if left_hand holds parallel_box1",
            "name": "target: hold(left_hand, parallel_box1)"
            "identifier": 1,
        },
        {
            "summary": "sequence to load parallel_box1",
            "name": "sequence: load_tool(left_hand, parallel_box1)",
            "identifier": 2,
            "children": [
                {
                    "summary": "condition node to check if parallel_box1 is equippable",
                    "name": "precondition: is_equippable(parallel_box1)"
                    "identifier": 3,
                },
                {
                    "summary": "condition node to check if left_hand is free,
                    "name": "target: is_free(left_hand)"
                    "identifier": 4,   
                },
                {
                    "summary": "action node to equip parallel_box1 to left hand",
                    "name": "action: load_tool(left_hand, parallel_box1)",
                    "identifier": 5,
                },
            ],
        },
    ],
}
last_failed_node: 
{
    "summary": "condition node to check if left_hand is free,
    "name": "target: is_free(left_hand)"
    "identifier": 4,   
}
instructions: "insert gear1 into shaft1"

- Output:
{
    "summary": "selector to load parallel_box1",
    "name": "selector: load_tool(left_hand, parallel_box1)",
    "identifier": 0,
    "children": [
        {
            "summary": "condition node to check if left_hand holds parallel_box1",
            "name": "target: hold(left_hand, parallel_box1)"
            "identifier": 1,
        },
        {
            "summary": "sequence to load parallel_box1",
            "name": "sequence: load_tool(left_hand, parallel_box1)",
            "identifier": 2,
            "children": [
                {
                    "summary": "condition node to check if parallel_box1 is equippable",
                    "name": "precondition: is_equippable(parallel_box1)"
                    "identifier": 3,
                },
                {
                    "summary": "selector to make left_hand unload outward_claw",
                    "name": "selector: unload_tool(left_hand, outward_claw)",
                    "children": [
                        {
                            "summary": "condition node to check if left_hand is free,
                            "name": "target: is_free(left_hand)"
                        },
                        {
                            "summary": "sequence to make left_hand unload outward_claw",
                            "name": "sequence: unload_tool(left_hand, outward_claw)",
                            "children": [
                                {
                                    "summary": "condition node to check if outward_claw is free",
                                    "name": "precondition: is_free(outward_claw)"
                                },
                                {
                                    "summary": "condition node to check if left hand holds outward_claw",
                                    "name": "precondition: hold(left_hand, outward_claw)"
                                },
                                {
                                    "summary": "action node to make left hand unload outward_claw",
                                    "name": "action: unload_tool(left_hand, outward_claw)",
                                },
                            ],
                        },
                    ],
                },
                {
                    "summary": "action node to equip parallel_box1 to left hand",
                    "name": "action: load_tool(left_hand, parallel_box1)",
                    "identifier": 5,
                },
            ],
        },
    ],
}
"""

