[user]
Information about world states should be in json dictionary format. Example:
"""
{
    "objects": [
        {"name": "leg1", "properties": []}, # leg1 is an object with no properties
        {"name": "seat", "properties": []}, # seat is an object with no properties
        {"name": "cabinet", "properties": ["open"]}, # cabinet is an object with a property "open"
        {"name": "table", "properties": []}, # table is an object with no properties
    ],
    "constraints": [
        {"source": "leg1", "name": "can_screw_to", "target": "seat"}, # means leg1 can be screwed to seat
        {"source": "cabinet", "name": "on_something", "target": "table"}, # means cabinet is on table
    ],
    "relations": [
        {"source": "leg1", "name": "is_screwed_to", "target": "seat"}, # means leg1 is screwed to seat
    ],
}
"""
It contains three lists: 
    - "objects": the objects and their properties (as lists of strings) in the world. The properties can be changed by robot actions.
    - "constraints": the constraint relations that are enforced and should not be changed. They are knowledge about the world or some constraints set by the user.
    - "relations": the relations in the world. They can be changed by robot actions.
The properties, constraints and relations should always align with the [PREDICATE_LIST] in domain knowledge.
Only concentrate on the objects, constraints and relations that are related to the current task.

-------------------------------------------------------
The texts above are part of the overall instruction. Do not start working yet:
[assistant]
Understood. I will wait for further instructions before starting to work.