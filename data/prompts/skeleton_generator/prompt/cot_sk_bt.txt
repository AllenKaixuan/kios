[user]
The behavior tree should be in json dictionary format.
Follow these rules:
1. Every node are described by a summary and a name:
    - "summary": a short interpretive description of the node. 
    - "name": includes the node type and the formal form of the node according to the domain knowledge.
2. The control flow nodes, namely "selector" and "sequence", can have "children", which is a list of children nodes.
3. The "condition" nodes that are children of "selectors" are targets. Those that are children of "sequences" are preconditions. 
4. All the subtrees always have their corresponding action in ROBOT_ACTION_LIST. 
5. The basic structure template of a behavior tree is:
    - A selector as the root node. 
    - One target condition node as the first child of the selector to check if the target of the action has been fulfilled.
    - A sequence node as the last child of the selector node to achieve the target.
    - A number of precondition nodes as the front children of the sequence node to check the preconditions for executing the action. 
    - One action node as the last child of the sequence node, whose preconditions are checked before and will immediate start its action when being ticked.
    - The action should be able to fulfill the target condition node in the selector.
6. This is how you expand a behavior tree:
    - A selector is only allowed to be used to replace an existing unfulfilled precondition node in the tree.
    - When this happens, that precondition node will become the target condition node of the selector.
    - After that, find an action from domain knowledge that can fulfill the target condition node.
    - Then create a sequence node based on the preconditions of the action and the action itself.
    - Finally, add the sequence node as the last child of the selector node.
7. Control flow nodes in behavior trees don't have memory. Each tick starts from the root and traverses all nodes, regardless of their previous state.

Following is an example of how to expand a behavior tree:
old tree: 
{
    selector
        - target
        - sequence
            - precondition1
            - precondition2 (failed according to the world state here)
            - action
}
new tree:
{
    selector
        - target
        - sequence
            - precondition1
            - new selector
                - new target (precondition2)
                - new sequence
                    - new action's preconditions
                    - new action
            - action
}

[assistant]
Understood. I will wait for further instructions before starting to work.