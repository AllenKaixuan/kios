[user]
The behavior tree should be in json dictionary format.
Following is a simple example:
"""
{
    "summary": "Selector to change the tool in the left hand from outwardgripper to defaultgripper",
    "name": "selector: change_tool(left_hand, outwardgripper, defaultgripper)"
    "children": [
        {
            "summary": "Check the target that the left hand is holding the default gripper",
            "name": "target: hold(left_hand, defaultgripper)"
        },
        {
            "summary": "Sequence to change the tool in the left hand from outwardgripper to defaultgripper", 
            "name": "sequence: change_tool(left_hand, outwardgripper, defaultgripper)",
            "children": [
                {
                    "summary": "check the precondition that the left hand is holding the outwardgripper",
                    "name": "precondition: hold(left_hand, outwardgripper)"
                },
                {
                    "summary": "check the precondition that the outwardgripper is empty",
                    "name": "precondition: is_empty(outwardgripper)"
                },
                {
                    "summary": "Action to change the tool in the left hand from outwardgripper to defaultgripper",
                    "name": "action: change_tool(left_hand, outwardgripper, defaultgripper)"
                }
            ]
        }
    ]
}
"""
The dictionary that you return should be formatted as json dictionary. Follow these rules:
1. Every node are described by a summary and a name:
    - "summary": a short interpretive description of the node. 
    - "name": includes the node type and the formal form of the node according to the domain knowledge. Legal node types are "selector", "sequence", "condition" ("target", "precondition"), "action".
2. The control flow nodes, namely "selector" and "sequence", can have "children", which is a list of children nodes.
3. The "condition" nodes that are children of "selectors" are targets. Those that are children of "sequences" are preconditions.
4. All the node should always have their corresponding actions/precidates in the domain knowledge.
5. Control flow nodes in behavior trees don't have memory. Each tick starts from the root and traverses all nodes, regardless of their previous state.
6. The basic structure template of a unit subtree is:
    - A selector as the root node. 
    - One target condition node as the first child of the selector to check if the target of this subtree has been satisfied.
    - A sequence node as the last child of the selector node to achieve the target condition node.
    - A number of precondition nodes as the first child nodes of the sequence node to check the action's preconditions.
    - One action node as the last child of the sequence node, whose preconditions are checked in the child condition nodes before.
    - The action should have effects that can fulfill the target condition node in the selector.

7. When performing a new action to fulfill an unsatisfied precondition, you can construct a subtree to replace the precondition and take that unfulfilled precondition as the target of the subtree. Then you construct the sequence of the subtree according to the new action you want to perform. 
8. The behavior tree should be constructed based on the action sequence you planned and the action definitions in ROBOT_ACTION_LIST.
9. All of the control flow nodes, namely selectors and sequences, are without memory. A new behavior tree tick will always start from the root and traverse all the nodes even if they are ticked in the last tick.

When generating the behavior tree, make sure the tree has the asked structure.