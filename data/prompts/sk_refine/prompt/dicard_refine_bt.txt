[user]
You should refine the behavior tree skeleton into a full behavior tree, which is in json dictionary format and have a structure like the following example:
"""
{
    "summary": "selector to load inward_claw to left hand",
    "name": "selector: load_tool(left_hand, inward_claw)",
    "identifier": 3,
    "type_name": "selector",
    "children": [
        {
            "summary": "check if left_hand is holding inward_claw",
            "name": "target: hold(left_hand, inward_claw)",
            "identifier": 4,
            "type_name": "condition",
            "conditions": [
                {
                    "object_name": "left_hand",
                    "property_name": "hold",
                    "property_value": "inward_claw",
                    "status": true,
                }
            ],
        },
        {
            
            "summary": "sequence to load inward_claw to left hand",
            "name": "sequence: load_tool(left_hand, inward_claw)",
            "identifier": 5,
            "type_name": "sequence",
            "children": [
                {
                    "summary": "check if inward_claw is equippable",
                    "name": "precondition: is_equippable(inward_claw)",
                    "identifier": 6,
                    "type_name": "condition",
                    "conditions": [
                        {
                            "object_name": "inward_claw",
                            "property_name": "is_equippable",
                            "property_value": null,
                            "status": true,
                        }
                    ],
                },
                {
                    "summary": "check if left hand is free",
                    "name": "precondition: is_free(left_hand)",
                    "identifier": 7,
                    "type_name": "condition",
                    "conditions": [
                        {
                            "object_name": "left_hand",
                            "property_name": "is_free",
                            "property_value": null,
                            "status": true,
                        }
                    ],
                },
                {
                    "summary": "equip inward_claw to left hand",
                    "name": "action: load_tool(left_hand, inward_claw)",
                    "identifier": 8,
                    "type_name": "action",
                    "effects": [
                        {
                            "object_name": "left_hand",
                            "property_name": "is_free",
                            "property_value": null,
                            "status": false,
                        },
                        {
                            "object_name": "inward_claw",
                            "property_name": "is_equippable",
                            "property_value": null,
                            "status": false,
                        },
                        {
                            "object_name": "left_hand",
                            "property_name": "hold",
                            "property_value": "inward_claw",
                            "status": true,
                        },
                    ],
                },
            ],
        },
    ],
}
"""
The dictionary that you return should be formatted as json dictionary. Follow these rules:
1. Every node should have four basic keys:
    - "summary": a short description of the node.
    - "name": the name of the node. The name should follow the definitions in the domain knowledge.
    - "identifier": the unique id of the node.
    - "type_name": can be: "selector", "sequence", "condition", "action".
2. The control flow node, "selector" and "sequence" nodes, can have "children", which is a list of children nodes.
3. The "condition" nodes that are children of "selectors" are "targets". Those that are children of "sequences" are preconditions. 
4. The "condition" nodes should have the key "conditions", which is a list of conditions to be checked. Each condition should have the following keys:
    - "object_name": the object to check.
    - "property_name": the property/relation of the object to be checked.
    - "property_value": this should be the other object in the relation. For property it should be null.
    - "status": true if the property/relation is expected to be true, false otherwise.
5. The "action" nodes should have a key "effects", which is a list of the to-be-exerted effects of the action. Each effect should have the following keys:
    - "object_name": the affected object.
    - "property_name": the affected property/relation of the object.
    - "property_value": this should be the other object if this is a relation. For property it should be null.
    - "status": true if the effect is to add this property/relation. false if is to remove it.
6. All the subtrees always have their corresponding action in ROBOT_ACTION_LIST. They are used to represent the actions in the action sequence. Its basic structure is:
    - A selector as the root node.
    - (Usually one) target condition node as the first child of the selector to check if the target of the action has been fulfilled.
    - A sequence node as the last child of the selector node to achieve the target.
    - (Usually a number of) precondition nodes as the front children of the sequence node to check the preconditions for executing the action. 
    - One action node as the last child of the sequence node, whose preconditions are checked before and will immediate start the job when being ticked.
    - The action will exert its defined effects after finishing the job successfully. Those effects should fulfilled all the target conditions in the selector node.
    A brief example:
{
    selector: load_tool selector,
    children: [
        {
            target: check if inward_claw is equipped by left hand,
        },
        {
            sequence: load_tool,
            children: [               
                    precondition: check if inward_claw is equippable,
                    precondition: check if left hand is free,
                    {action: equip inward_claw to left hand, effects: [left hand not free, inward_claw not equippable, left_hand holds inward_claw]},
            ],
        },
    ],
}

7. When performing a new action to fulfill a unsatisfied precondition, you can construct a subtree to replace the precondition and take that unfulfilled precondition as the target of the subtree. Then you construct the sequence of the subtree according to the new action you want to perform. 
8. The behavior tree should be constructed based on the action sequence you planned and the action definitions in ROBOT_ACTION_LIST. 
9. All of the control flow nodes, namely selectors and sequences, are without memory. A new behavior tree tick will always start from the root and traverse all the nodes even if they are ticked in the last tick.

-------------------------------------------------------
The texts above are part of the overall instruction. Do not start working yet:
[assistant]
Understood. I will wait for further instructions before starting to work.