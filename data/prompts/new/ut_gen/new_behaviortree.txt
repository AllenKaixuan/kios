The behavior tree should be in json dictionary format.
When building a unit subtree, follow these rules:
1. Every node are described by a summary and a name:
    - "summary": a short interpretive description of the node. 
    - "name": includes the node type and the formal form of the node according to the domain knowledge. Legal node types are "selector", "sequence", "condition" ("target", "precondition"), "action".
2. The control flow nodes, namely "selector" and "sequence", can have "children", which is a list of children nodes.
3. The "condition" nodes that are children of "selectors" are targets. Those that are children of "sequences" are preconditions. 
4. All the node should always have their corresponding actions/precidates in the domain knowledge. 
5. Control flow nodes in behavior trees don't have memory. Each tick starts from the root and traverses all nodes, regardless of their previous state.
6. The basic structure template of a unit subtree is:
    - A selector as the root node. 
    - One target condition node as the first child of the selector to check if the target of this subtree has been satisfied.
    - A sequence node as the last child of the selector node to achieve the target condition node.
    - A number of precondition nodes as the first child nodes of the sequence node to check the action's preconditions.
    - One action node as the last child of the sequence node, whose preconditions are checked in the child condition nodes before.
    - The action should have effects that can fulfill the target condition node in the selector.
Following is an example:
action: change_tool(left_hand, outwardgripper)
unit subtree:
{
    "summary": "Selector to change the tool in the left hand from outwardgripper to defaultgripper",
    "name": "selector: change_tool(left_hand, outwardgripper, defaultgripper)"
    "children": [
        {
            "summary": "The target is to make the left hand hold the default gripper",
            "name": "target: hold(left_hand, defaultgripper)"
        },
        {
            "summary": "Sequence to change the tool in the left hand from outwardgripper to defaultgripper", 
            "name": "sequence: change_tool(left_hand, outwardgripper, defaultgripper)",
            "children": [
                {
                    "summary": "A precondition is that the left hand is holding the outwardgripper",
                    "name": "precondition: hold(left_hand, outwardgripper)"
                },
                {
                    "summary": "A precondition is that the outwardgripper is empty",
                    "name": "precondition: is_empty(outwardgripper)"
                },
                {
                    "summary": "Take the action to change the tool in the left hand from outwardgripper to defaultgripper",
                    "name": "action: change_tool(left_hand, outwardgripper, defaultgripper)"
                }
            ]
        }
    ]
}

