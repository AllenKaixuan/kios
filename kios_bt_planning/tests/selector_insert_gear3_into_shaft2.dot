digraph pastafarianism {
ordering=out;
graph [fontname="times-roman"];
node [fontname="times-roman"];
edge [fontname="times-roman"];
selector [fillcolor=cyan, fontcolor=black, fontsize=9, label="selector: insert gear3 into shaft2", shape=octagon, style=filled];
target [fillcolor=gray, fontcolor=black, fontsize=9, label="target: is_inserted_to(gear3, shaft2)", shape=ellipse, style=filled];
"selector: insert gear3 into shaft2" -> "target: is_inserted_to(gear3, shaft2)";
sequence [fillcolor=orange, fontcolor=black, fontsize=9, label="sequence: insert(gear3, shaft2)", shape=box, style=filled];
"selector: insert gear3 into shaft2" -> "sequence: insert(gear3, shaft2)";
selector [fillcolor=cyan, fontcolor=black, fontsize=9, label="selector: load_tool", shape=octagon, style=filled];
"sequence: insert(gear3, shaft2)" -> "selector: load_tool";
target [fillcolor=gray, fontcolor=black, fontsize=9, label="target: hold(left_hand, inward_claw)", shape=ellipse, style=filled];
"selector: load_tool" -> "target: hold(left_hand, inward_claw)";
sequence [fillcolor=orange, fontcolor=black, fontsize=9, label="sequence: load_tool", shape=box, style=filled];
"selector: load_tool" -> "sequence: load_tool";
precondition [fillcolor=gray, fontcolor=black, fontsize=9, label="precondition: is_equippable(inward_claw)", shape=ellipse, style=filled];
"sequence: load_tool" -> "precondition: is_equippable(inward_claw)";
precondition [fillcolor=gray, fontcolor=black, fontsize=9, label="precondition: is_free(left_hand)", shape=ellipse, style=filled];
"sequence: load_tool" -> "precondition: is_free(left_hand)";
action [fillcolor=gray, fontcolor=black, fontsize=9, label="action: load_tool(left_hand, inward_claw)", shape=ellipse, style=filled];
"sequence: load_tool" -> "action: load_tool(left_hand, inward_claw)";
selector [fillcolor=cyan, fontcolor=black, fontsize=9, label="selector: pick_up", shape=octagon, style=filled];
"sequence: insert(gear3, shaft2)" -> "selector: pick_up";
target [fillcolor=gray, fontcolor=black, fontsize=9, label="target: hold(inward_claw, gear3)", shape=ellipse, style=filled];
"selector: pick_up" -> "target: hold(inward_claw, gear3)";
sequence [fillcolor=orange, fontcolor=black, fontsize=9, label="sequence: pick_up", shape=box, style=filled];
"selector: pick_up" -> "sequence: pick_up";
precondition [fillcolor=gray, fontcolor=black, fontsize=9, label="precondition: can_manipulate(inward_claw, gear3)", shape=ellipse, style=filled];
"sequence: pick_up" -> "precondition: can_manipulate(inward_claw, gear3)";
precondition [fillcolor=gray, fontcolor=black, fontsize=9, label="precondition: is_free(gear3)", shape=ellipse, style=filled];
"sequence: pick_up" -> "precondition: is_free(gear3)";
action [fillcolor=gray, fontcolor=black, fontsize=9, label="action: pick_up(left_hand, inward_claw, gear3)", shape=ellipse, style=filled];
"sequence: pick_up" -> "action: pick_up(left_hand, inward_claw, gear3)";
precondition [fillcolor=gray, fontcolor=black, fontsize=9, label="precondition: can_insert_to(gear3, shaft2)", shape=ellipse, style=filled];
"sequence: insert(gear3, shaft2)" -> "precondition: can_insert_to(gear3, shaft2)";
action [fillcolor=gray, fontcolor=black, fontsize=9, label="action: insert(left_hand, inward_claw, gear3, shaft2)", shape=ellipse, style=filled];
"sequence: insert(gear3, shaft2)" -> "action: insert(left_hand, inward_claw, gear3, shaft2)";
}
