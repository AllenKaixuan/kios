[user]
I will give you some examples of the input and the output you will generate. 
Example 1:
"""
- Input:
(define (problem robot_assembly_problem-problem)
 (:domain robot_assembly_problem-domain)
 (:objects
   parallel_box1 parallel_box2 inward_claw outward_claw no_tool - tool
   gear1 gear2 gear3 shaft1 shaft2 base - part
   left_hand - hand
 )
 (:init (can_manipulate parallel_box1 gear1) (can_manipulate outward_claw gear2) (can_manipulate inward_claw gear3) (can_manipulate parallel_box2 shaft1) (can_manipulate no_tool shaft2) (can_screw_to leg1 seat) (can_screw_to leg2 seat) (can_insert_to back seat) (can_screw_to nut1 seat) (can_screw_to nut2 seat) (can_screw_to blub base) (can_place_to lamp blub) (can_insert_to shaft1 base) (can_insert_to shaft2 base) (can_insert_to gear3 shaft2) (can_insert_to gear2 base) (can_insert_to gear1 shaft1) (is_inserted_to shaft1 base) (is_free left_hand) (is_free parallel_box1) (is_free parallel_box2) (is_free inward_claw) (is_free outward_claw) (is_free no_tool) (is_equippable parallel_box1) (is_equippable parallel_box2) (is_equippable inward_claw) (is_equippable outward_claw) (is_equippable no_tool))
 (:goal (and (is_inserted_to gear1 shaft1)))
)
- Output:
```
{"task_plan": {
    "action_sequence": [
        "load_tool(left_hand, parallel_box1)",
        "pick_up(left_hand, parallel_box1, gear1)",
        "insert(left_hand, parallel_box1, gear1, shaft1)"
    ],
    "action_instructions": [
        "equip the parallel_box1 on the left hand",
        "pick up the gear1 with the parallel_box1 in the left hand",
        "insert the gear1 into the shaft1 using the parallel_box1 in the left hand"
    ],
    "object_name": ["left_hand", "gear1", "parallel_box1", "shaft1"],
    "behavior_tree": {
    "summary": "selector to insert gear1 into shaft1",
    "name": "selector: insert(left_hand, parallel_box1, gear1, shaft1)",
    "children": [
        {
            "summary": "condition node to check if gear1 is inserted to shaft1",
            "name": "target: is_inserted_to(gear1, shaft1)",
        },
        {
            "summary": "sequence to insert gear1 into shaft1",
            "name": "sequence: insert(left_hand, parallel_box1, gear1, shaft1)",
            "children": [
                {
                    "summary": "selector to load parallel_box1",
                    "name": "selector: load_tool(left_hand, parallel_box1)",
                    "children": [
                        {
                            "summary": "condition node to check if left_hand holds parallel_box1",
                            "name": "target: hold(left_hand, parallel_box1)"
                        },
                        {
                            "summary": "sequence to load parallel_box1",
                            "name": "sequence: load_tool(left_hand, parallel_box1)",
                            "children": [
                                {
                                    "summary": "condition node to check if parallel_box1 is equippable",
                                    "name": "precondition: is_equippable(parallel_box1)"
                                },
                                {
                                    "summary": "condition node to check if left hand is free",
                                    "name": "precondition: is_free(left_hand)"
                                },
                                {
                                    "summary": "action node to equip parallel_box1 to left hand",
                                    "name": "action: load_tool(left_hand, parallel_box1)",
                                    "effects": [
                                        {"summary": "left_hand will be not free",},
                                        {"summary": "parallel_box1 will be not equippable",},
                                        {"summary": "left_hand will hold parallel_box1",},
                                    ],
                                },
                            ],
                        },
                    ],
                },
                {
                    "summary": "selector to use left_hand with parallel_box1 to pick up gear1",
                    "name": "selector: pick_up(left_hand, parallel_box1, gear1)",
                    "children": [
                        {
                            "summary": "condition node to check if parallel_box1 holds gear1",
                            "name": "target: hold(parallel_box1, gear1)"
                        },
                        {
                            "summary": "sequence to use left hand with parallel_box1 to pick up gear1",
                            "name": "sequence: pick_up(left_hand, parallel_box1, gear1)",
                            "children": [
                                {
                                    "summary": "condition node to check if parallel_box1 is free",
                                    "name": "precondition: is_free(parallel_box1)"
                                },
                                {
                                    "summary": "condition node to check if left hand holds parallel_box1",
                                    "name": "precondition: hold(left_hand, parallel_box1)"
                                },
                                {
                                    "summary": "action node to use left hand with parallel_box1 to pick up gear1",
                                    "name": "action: pick_up(left_hand, parallel_box1, gear1)",
                                    "effects": [
                                        {"summary": "parallel_box1 will hold gear1",},
                                        {"summary": "parallel_box1 will be not free",},
                                    ],
                                },
                            ],
                        },
                    ],
                },
                {
                    "summary": "condition node to check if gear1 can be inserted to shaft1",
                    "name": "precondition: can_insert_to(gear1, shaft1)",
                },
                {
                    "summary": "action node to use left_hand with parallel_box1 to insert gear1 to shaft1",
                    "name": "action: insert(left_hand, parallel_box1, gear1, shaft1)",
                    "effects": [
                        {"summary": "parallel_box1 will be not holding gear1",},
                        {"summary": "parallel_box1 will be free",},
                        {"summary": "gear1 will be inserted to shaft1",},
                    ],
                },
            ],
        },
    ],
}
},
"initial_state": {"objects": [
            {"name": "gear1", "properties": []},
            {"name": "shaft1", "properties": []},
            {"name": "parallel_box1", "properties": ["is_equippable", "is_free"]},
            {"name": "left_hand", "properties": ["is_free"]},
        ],
        "constraints": [
            {"source": "gear1", "name": "can_insert_to", "target": "shaft1"},
            {"source": "parallel_box1", "name": "can_manipulate", "target": "gear1"},
        ],
        "relations": [],
},
"instruction_summary": "insert gear1 into shaft1",
"question":""}
```
"""
-------------------------------------------------------
The texts above are part of the overall instruction. Do not start working yet:
[assistant]
Understood. I will wait for further instructions before starting to work.