[user]
The behavior tree should be in python dictionary format and have a structure like the following example:
"""
{
    "name": "load_tool selector",
    "identifier": 3,
    "type_name": "selector",
    "children": [
        {
            "summary": "check if inward_claw is held by left hand",
            "name": "check left_hand hold inward_claw",
            "identifier": 4,
            "type_name": "condition",
            "conditions": [
                {
                    "object_name": "left_hand",
                    "property_name": "hold",
                    "property_value": "inward_claw",
                    "status": True,
                }
            ],
        },
        {
            "name": "load_tool sequence",
            "identifier": 5,
            "type_name": "sequence",
            "children": [
                {
                    "summary": "check if inward_claw is equippable",
                    "name": "check inward_claw is_equippable",
                    "identifier": 6,
                    "type_name": "condition",
                    "conditions": [
                        {
                            "object_name": "inward_claw",
                            "property_name": "is_equippable",
                            "property_value": None,
                            "status": True,
                        }
                    ],
                },
                {
                    "summary": "check if left hand is free",
                    "name": "check left_hand is_free",
                    "identifier": 7,
                    "type_name": "condition",
                    "conditions": [
                        {
                            "object_name": "left_hand",
                            "property_name": "is_free",
                            "property_value": None,
                            "status": True,
                        }
                    ],
                },
                {
                    "summary": "equip inward_claw to left hand",
                    "name": "load_tool(left_hand, inward_claw)",
                    "identifier": 8,
                    "type_name": "action",
                    "effects": [
                        {
                            "object_name": "left_hand",
                            "property_name": "is_free",
                            "property_value": None,
                            "status": False,
                        },
                        {
                            "object_name": "inward_claw",
                            "property_name": "is_equippable",
                            "property_value": None,
                            "status": False,
                        },
                        {
                            "object_name": "left_hand",
                            "property_name": "hold",
                            "property_value": "inward_claw",
                            "status": True,
                        },
                    ],
                },
            ],
        },
    ],
}
"""
The dictionary that you return should be formatted as python dictionary. Follow these rules:
1. Every node should have three basic keys:
    - "name": the name of the node (for action node, the name should be the same as defined in the domain knowledge)
    - "identifier": the unique id of the node
    - "type_name": node_type, can be: "selector", "sequence", "condition", "action"
2. The control flow node, "selector" and "sequence" nodes, can have "children", which is a list of children nodes.
3. The "action" and "condition" nodes should have "summary", which is a short description of the action/condition.
4. The "condition" nodes should have "conditions", which is a list of conditions to be checked. Each condition should have the following keys:
    - "object_name": the object to check
    - "property_name": the property/relation of the object to be checked
    - "property_value": this should be the other object if this is a relation. For property it should be None
    - "status": the boolean status of the property/relation the condition expects, True if the property/relation should be True, False otherwise
5. The "action" nodes should have a key "effects" with a list of effects to be exerted after the execution of the action. Each effect should have the following keys:
    - "object_name": the affected object
    - "property_name": the affected property/relation of the object
    - "property_value": this should be the other object if this is a relation. For property it should be None
    - "status": True if the effect is to add this property/relation. False if is to remove.
6. All the subtrees always have their corresponding action in ROBOT_ACTION_LIST. They are used to represent the actions in the action sequence. Its basic structure is:
    - A selector as the root node.
    - (Usually one) (Goal-)Condition node as the first child of the selector. It should check the goal conditions the action intends to achieve. So if the goal condition is met, the selector will directly return success.
    - A sequence node as the last child of the selector node. The aim of the sequence is to achieve the goal conditions.
    - (Pre-)Condition nodes as the front children of the sequence node. They should check the preconditions of the action node after them. 
    - Only one action node as the last child of the sequence node. Its preconditions are checked by the condition nodes in the front of it. Its effects are exerted after the execution of the action, and should be able to satisfy the goal condition(s).
    A brief example:
{
    selector: load_tool selector,
    "children": [
        {
            (goal)condition: check if inward_claw is equipped by left hand,
        },
        {
            sequence: load_tool sequence,
            children: [               
                    (pre)condition: check if inward_claw is equippable, (if not satisfied, this condition node can be expanded. A new subtree can be constructed to satisfy this)
                    (pre)condition: check if left hand is free, (if not satisfied, this condition node can be expanded. A new subtree can be constructed to satisfy this)
                    (more preconditions can be added here),
                    action: equip inward_claw to left hand,
            ],
        },
    ],
}

7. When there is any (Pre-)condition node that is not satisfied, a behavior tree can be constructed according to the rules above, which replaces the unsatisfied (Pre-)condition, takes that (Pre-)condition as the (Goal-)condition to achieve and includes the action to achieve it. 
8. The selector can have multiple (goal-)condition nodes as children, but must have only and no more than one sequence node as the last child.
9. The sequence node can have multiple (pre-)condition nodes (or selectors) as children, but must have only and no more than one action node as the last child.
10. The behavior tree should be constructed based on the action sequence you planned and the action definitions in ROBOT_ACTION_LIST. 

There are also some counterexamples for you to refer to:
1. One sequence should never have multiple action nodes as its children like the behavior tree below.
{
    "name": "Get the apple",
    "identifier": 0,
    "type_name": "selector",
    "children": [
        {
            "summary": "check if the apple is in hand",
            "name": "check apple in hand",
            "identifier": 1,
            "type_name": "condition",
            (condition omitted)
        },
        {
            "name": "Pick Up Sequence",
            "identifier": 2,
            "type_name": "sequence",
            "children": [
                {
                    "summary": "check if the apple is on the table",
                    "name": "check apple on the table",
                    "identifier": 3,
                    "type_name": "condition",
                    (condition omitted)
                },
                {
                    "summary": "go to the table",
                    "name": "go_to(table)",
                    "identifier": 4,
                    "type_name": "action",
                    (effect omitted)
                },
                {
                    "summary": "check if the hand is free",
                    "name": "check hand free",
                    "identifier": 5,
                    "type_name": "condition",
                    (condition omitted)
                },
                {
                    "summary": "pick up the apple",
                    "name": "pick_up(apple)",
                    "identifier": 6,
                    "type_name": "action",
                    (effect omitted)
                },
            ],
        },
    ],
}

-------------------------------------------------------
The texts above are part of the overall instruction. Do not start working yet:
[assistant]
Understood. I will wait for further instructions before starting to work.