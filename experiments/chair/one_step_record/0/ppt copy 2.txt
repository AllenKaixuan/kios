You are an excellent interpreter of instructions for robotic assembly tasks. The input are: target: The target that you make the sequential plan and construct the behavior tree to achieve. initial_state: The initial state that you start from. You analyze the target, refer to the domain knowledge to understand it, make an action sequence and construct a behavior tree based on it. Your output should be a json object which follows the regulated format. Following is an input/output example. Example 1: """ INPUT: target: "insert the gear1 into the shaft1" initial_state: {"objects": [ {"name": "gear1", "properties": []}, {"name": "shaft1", "properties": []}, {"name": "parallel_box1", "properties": ["is_empty"]}, {"name": "left_hand", "properties": []}, ], "constraints": [ {"source": "gear1", "name": "can_insert_to", "target": "shaft1"}, {"source": "parallel_box1", "name": "can_manipulate", "target": "gear1"}, ], "relations": [ {"source": "left_hand", "name": "hold", "target": "parallel_box1"}, ], } OUTPUT: { "thought": "At the start, the left hand is holding the parallel_box1, and the parallel_box1 is empty. According to the constraints, the gear1 can be inserted to the shaft1, and the parallel_box1 can manipulate the gear1. So, the gear1 can be picked up with the parallel_box1 in the left hand, and then the precondition hold(parallel_box1, gear1) is satisfied. Finally, the gear1 can be inserted into the shaft1 with the parallel_box1 in the left hand.", "action_sequence": [ "pick_up(left_hand, parallel_box1, gear1)", "insert(left_hand, parallel_box1, gear1, shaft1)" ], "behavior_tree": { "summary": "selector to insert the gear1 into the shaft1 with the parallel_box1 in the left hand", "name": "selector: insert(gear1, shaft1, parallel_box1, left_hand)", "children": [ { "summary": "check the target that gear1 is inserted to shaft1", "name": "target: is_inserted_to(gear1, shaft1)" }, { "summary": "sequence to insert the gear1 into the shaft1 with the parallel_box1 in the left hand", "name": "sequence: insert(gear1, shaft1, parallel_box1, left_hand)", "children": [ { "summary": "check the precondition that the left hand is holding the parallel_box1", "name": "precondition: hold(left_hand, parallel_box1)" }, { "summary": "selector to pick_up the gear1 with the parallel_box1 in the left hand", "name": "selector: pick_up(left_hand, parallel_box1, gear1)", "children": [ { "summary": "check the target that the parallel_box1 is holding the gear1", "name": "target: hold(parallel_box1, gear1)" }, { "summary": "sequence to pick_up the gear1 with the parallel_box1 in the left hand", "name": "sequence: pick_up(left_hand, parallel_box1, gear1)", "children": [ { "summary": "check the precondition that the parallel_box1 is empty", "name": "precondition: is_empty(parallel_box1)" }, { "summary": "check the precondition that the left hand is holding the parallel_box1", "name": "precondition: hold(left_hand, parallel_box1)" }, { "summary": "the action to pick_up the gear1 with the parallel_box1 in the left hand", "name": "action: pick_up(left_hand, parallel_box1, gear1)" } ] } ] }, { "summary": "the action to insert the gear1 into the shaft1 with the parallel_box1 in the left hand", "name": "action: insert(left_hand, parallel_box1, gear1, shaft1)" } ] } ] } } Resume from the input below. """ target: target: is_screwed_to(chairnut1, chairseatbolt1) initial_state: {'objects': [{'name': 'clampgripper', 'properties': ['is_empty']}, {'name': 'parallelgripper', 'properties': ['is_empty']}, {'name': 'inwardgripper', 'properties': ['is_empty']}, {'name': 'outwardgripper', 'properties': ['is_empty']}, {'name': 'defaultgripper', 'properties': []}, {'name': 'chairnut1', 'properties': []}, {'name': 'chairnut2', 'properties': []}, {'name': 'chairseat', 'properties': []}, {'name': 'chairseatbolt1', 'properties': []}, {'name': 'chairseatbolt2', 'properties': []}, {'name': 'chairseatconnection', 'properties': []}, {'name': 'chairseatthread1', 'properties': []}, {'name': 'chairseatthread2', 'properties': []}, {'name': 'chairback', 'properties': []}, {'name': 'chairleg1', 'properties': []}, {'name': 'chairleg2', 'properties': []}, {'name': 'left_hand', 'properties': []}], 'constraints': [{'source': 'clampgripper', 'name': 'can_manipulate', 'target': 'chairback'}, {'source': 'inwardgripper', 'name': 'can_manipulate', 'target': 'chairnut1'}, {'source': 'inwardgripper', 'name': 'can_manipulate', 'target': 'chairnut2'}, {'source': 'defaultgripper', 'name': 'can_manipulate', 'target': 'chairleg1'}, {'source': 'defaultgripper', 'name': 'can_manipulate', 'target': 'chairleg2'}, {'source': 'defaultgripper', 'name': 'can_manipulate', 'target': 'chairseat'}, {'source': 'chairnut1', 'name': 'can_screw_to', 'target': 'chairseatbolt1'}, {'source': 'chairnut2', 'name': 'can_screw_to', 'target': 'chairseatbolt2'}, {'source': 'chairback', 'name': 'can_insert_to', 'target': 'chairseatconnection'}, {'source': 'chairleg1', 'name': 'can_screw_to', 'target': 'chairseatthread1'}, {'source': 'chairleg2', 'name': 'can_screw_to', 'target': 'chairseatthread2'}], 'relations': [{'source': 'left_hand', 'name': 'hold', 'target': 'defaultgripper'}, {'source': 'defaultgripper', 'name': 'hold', 'target': 'chairleg1'}]} """ Return a JSON object.