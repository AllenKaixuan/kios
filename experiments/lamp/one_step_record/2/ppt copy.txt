You are an excellent interpreter of instructions for robotic assembly tasks. The input are: target: The target that you make the sequential plan and construct the behavior tree to achieve. initial_state: The initial state that you start from. You analyze the target, refer to the domain knowledge to understand it, make an action sequence and construct a behavior tree based on it. Your output should be a json object which follows the regulated format. Following is the domain knowledge you need, which includes: - the object types in the world, - the predicates for describing the states of the world, - the actions that the robot can apply, with their precondtions and effects defined. The object types are explained as follows: """ thing: The base class for all objects in the world. Its subclasses are: hand, tool, part. hand: The robot hand. A empty <hand> can only hold one <tool> at a time. tool: The tool to manipulate <part>. A empty <tool> can hold one <part> at a time. part: The part to be manipulated. """ The precidates are explained as follows: """ "PREDICATE_LIST" - is_empty(<tool>): <tool> is empty and can hold something. - can_manipulate(<tool>, <part>): <tool> can be used to manipulate <part> (manipulation constraint). This regulates the compatibility between <tool> and <part>. - can_insert_to(<part1>, <part2>): <part1> can be inserted into <part2> (insertion assembly constraint) - can_screw_to(<part1>, <part2>): <part1> can be screwed into <part2> (screw assembly constraint) - can_place_to(<part1>, <part2>): <part1> can be placed into <part2> (placement assembly constraint) - hold(<thing1>, <thing2>): <thing1> is holding <thing2>. It can be <hand> holding <tool> or <tool> holding <part>. - is_inserted_to(<part1>, <part2>): <part1> is inserted into <part2> (insertion assembly constraint is satisfied) - is_screwed_to(<part1>, <part2>): <part1> is screwed into <part2> (screw assembly constraint is satisfied) - is_placed_to(<part1>, <part2>): <part1> is placed into <part2> (placement assembly constraint is satisfied) """ The actions are explained as follows: """ "ROBOT_ACTION_LIST" - pick_up(<hand>, <tool>, <part>): <hand> use <tool> to pick up <part>. As preconditions, <hand> should be holding <tool> and <tool> should be empty in order to hold the <part>. The <part> will be held by the <tool> as a result of this action. - put_down(<hand>, <tool>, <part>): <hand> use <tool> to put down <part>. As preconditions, <hand> should be holding <tool> and <tool> should be holding <part>. The target is to make the tool <tool> empty. The <tool> will be empty and will not hold the <part> anymore as a result of this action. - place(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to place <part1> to <part2> (to satisfy the placement assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be holding <part1>. - detach(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to detach <part1> from <part2> (to lift the existing placement assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be empty to manipulate <part1>, and <part1> should be placed into <part2>. - insert(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to insert <part1> into <part2> (to satisfy the insertion assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be holding <part1>. - pull(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to pull <part1> from <part2> (to lift the existing insertion assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be empty to manipulate <part1>, and <part1> should be inserted into <part2>. - screw(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to screw <part1> into <part2> (to satisfy the screw assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be holding <part1>. - unscrew(<hand>, <tool>, <part1>, <part2>): <hand> use <tool> to unscrew <part1> from <part2> (to lift the existing screw assembly constraint between <part1> and <part2>). As preconditions, <hand> should be holding <tool> and <tool> should be empty to manipulate <part1>, and <part1> should be screwed into <part2>. - change_tool(<hand>, <tool1>, <tool2>): <hand> change the equipped tool from <tool1> to <tool2> in order to manipulate specific parts. As preconditions, <hand> should be holding <tool1> and <tool1> should be empty. """ the items in <> indicate the type of the instances needed for the predicates and actions. Information about world states should be in json dictionary format. It contains three lists: - objects: the objects and their properties (as lists of strings) in the world. The properties can be changed by robot actions. - constraints: the constraint relations that are enforced and should not be changed. They are knowledge about the world or some constraints set by the user. - relations: the relations in the world. They can be changed by robot actions. The properties, constraints and relations should always align with the [PREDICATE_LIST] in the domain knowledge. The behavior tree should be in json dictionary format. Following is a simple example: """ { "summary": "Selector to change the tool in the left hand from outwardgripper to defaultgripper", "name": "selector: change_tool(left_hand, outwardgripper, defaultgripper)", "children": [ { "summary": "the target is that the left hand is holding the default gripper", "name": "target: hold(left_hand, defaultgripper)" }, { "summary": "Sequence to change the tool in the left hand from outwardgripper to defaultgripper", "name": "sequence: change_tool(left_hand, outwardgripper, defaultgripper)", "children": [ { "summary": "A precondition is that the left hand is holding the outwardgripper", "name": "precondition: hold(left_hand, outwardgripper)" }, { "summary": "A precondition is that the outwardgripper is empty", "name": "precondition: is_empty(outwardgripper)" }, { "summary": "The action to change the tool in the left hand from outwardgripper to defaultgripper", "name": "action: change_tool(left_hand, outwardgripper, defaultgripper)" } ] } ] } """ 1. Every node are described by a summary and a name: - "summary": a short interpretive description of the node. - "name": includes the node type and the formal form of the node according to the domain knowledge. Legal node types are "selector", "sequence", "condition" ("target", "precondition"), "action". 2. The control flow nodes, namely "selector" and "sequence", can have "children", which is a list of children nodes. 3. The "condition" nodes that are children of "selectors" are targets. Those that are children of "sequences" are preconditions. 4. All the node should always have their corresponding actions/precidates in the domain knowledge. 5. Control flow nodes in behavior trees don't have memory. Each tick starts from the root and traverses all nodes, regardless of their previous state. 6. The basic structure template of a unit subtree is: - A selector as the root node. - One target condition node as the first child of the selector to check if the target of this subtree has been satisfied. - A sequence node as the last child of the selector node to achieve the target condition node. - A number of precondition nodes as the first child nodes of the sequence node to check the action's preconditions. - One action node as the last child of the sequence node, whose preconditions are checked in the child condition nodes before. - The action should have effects that can fulfill the target condition node in the selector. 7. If any precondition node will be unsatisfied when it is ticked, a unit subtree should be constructed to replace it, which take that precondition node as its target node and aims to achieve it. You should estimate the world state when the precondition is ticked (checked) according to the initial state and the effects of the actions executed before, then do this replacement repeatedly until all the preconditions are satisfied at the time they are ticked. 8. The behavior tree should be constructed based on the action sequence you planned and the action definitions in ROBOT_ACTION_LIST. 9. Control flow nodes (sequence nodes and selector nodes) don't have memory. Each tick starts from the root and traverses all nodes, regardless of their previous state. The output json obejct has the following keys: """ - "thought": A brief explanation of the thinking process behind the action sequence. - "action_sequence": A sequential list of robot actions. Only the actions defined in the "ROBOT_ACTION LIST" will be used. - "behavior_tree": A json dictionary form behavior tree constructed according to the "action_sequence" """  Resume from the input below. """ target: target: is_placed_to(lampshade, lampbulb) initial_state: {'objects': [{'name': 'clampgripper', 'properties': ['is_empty']}, {'name': 'parallelgripper', 'properties': ['is_empty']}, {'name': 'inwardgripper', 'properties': ['is_empty']}, {'name': 'outwardgripper', 'properties': ['is_empty']}, {'name': 'defaultgripper', 'properties': ['is_empty']}, {'name': 'lampbase', 'properties': []}, {'name': 'lampshade', 'properties': []}, {'name': 'lampbulb', 'properties': []}, {'name': 'cube', 'properties': []}, {'name': 'designring', 'properties': []}, {'name': 'left_hand', 'properties': []}], 'constraints': [{'source': 'clampgripper', 'name': 'can_manipulate', 'target': 'lampbulb'}, {'source': 'outwardgripper', 'name': 'can_manipulate', 'target': 'lampshade'}, {'source': 'lampbulb', 'name': 'can_screw_to', 'target': 'lampbase'}, {'source': 'lampshade', 'name': 'can_place_to', 'target': 'lampbulb'}], 'relations': [{'source': 'left_hand', 'name': 'hold', 'target': 'inwardgripper'}, {'source': 'lampbulb', 'name': 'is_screwed_to', 'target': 'lampbase'}]} """ Return a JSON object.