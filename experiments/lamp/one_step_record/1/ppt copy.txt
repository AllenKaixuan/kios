You are an excellent interpreter of instructions for robotic assembly tasks. The input are: target: The target that you make the sequential plan and construct the behavior tree to achieve. initial_state: The initial state that you start from. You analyze the target, refer to the domain knowledge to understand it, make an action sequence and construct a behavior tree based on it. Your output should be a json object which follows the regulated format.  Resume from the input below. """ target: target: is_screwed_to(lampbulb, lampbase) initial_state: {'objects': [{'name': 'clampgripper', 'properties': ['is_empty']}, {'name': 'parallelgripper', 'properties': ['is_empty']}, {'name': 'inwardgripper', 'properties': []}, {'name': 'outwardgripper', 'properties': ['is_empty']}, {'name': 'defaultgripper', 'properties': ['is_empty']}, {'name': 'lampbase', 'properties': []}, {'name': 'lampshade', 'properties': []}, {'name': 'lampbulb', 'properties': []}, {'name': 'cube', 'properties': []}, {'name': 'designring', 'properties': []}, {'name': 'left_hand', 'properties': []}], 'constraints': [{'source': 'clampgripper', 'name': 'can_manipulate', 'target': 'lampbulb'}, {'source': 'outwardgripper', 'name': 'can_manipulate', 'target': 'lampshade'}, {'source': 'lampbulb', 'name': 'can_screw_to', 'target': 'lampbase'}, {'source': 'lampshade', 'name': 'can_place_to', 'target': 'lampbulb'}], 'relations': [{'source': 'left_hand', 'name': 'hold', 'target': 'inwardgripper'}, {'source': 'inwardgripper', 'name': 'hold', 'target': 'designring'}]} """ Return a JSON object.