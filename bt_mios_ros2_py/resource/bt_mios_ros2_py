import rclpy
from rclpy.node import Node

import socket
import time
import json

from ws_client import *


class BTUdpNode(Node):

    def __init__(self):
        super().__init__('bt_upd_node')
        # flag for updating robot state
        self.declare_parameter('is_update', 'false')
        with open('parameter.json', 'r') as file:
            parameters = json.load(file)
            for name, value in parameters.items():
                self.declare_parameter(name, value)

        #  self.publisher_ = self.create_publisher(String, 'topic', 10)
        timer_period = 0.05  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.i = 0

    def is_update(self):
        flag = self.get_parameter('is_update').get_parameter_value().bool_value
        return flag

    def timer_callback(self):
        if self.is_update():
            pass
        else:
            pass
        # msg = String()
        # msg.data = 'Hello World: %d' % self.i
        # self.publisher_.publish(msg)
        # self.get_logger().info('Publishing: "%s"' % msg.data)
        # self.i += 1

    def test_telemetry_udp(address: str, subscriber_addr: str, subscriber_port: int = 12346):
        print("Testing Telemtry_UDP module...")
        print("subscribe to Telemetry_UDP with \"tau_ext\", \"q\"...")
        result_1 = call_method(address, 12000, "subscribe_telemetry",
                               {"ip": subscriber_addr, "port": subscriber_port, "subscribe": ["tau_ext", "q"]}, silent=False, timeout=7)
        if result_1["result"]["result"]:
            print("successfull subscribed.")
        else:
            print("Error while subscribing: ", result_1)
        print("receiving subscribed telemetry packages for next 10 seconds...")
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.bind((subscriber_addr, subscriber_port))
        cnt = 0
        received_pkgs = []
        start_time = time.time()
        try:
            print("\n    --Interrupt with ctrl+c--\n")
            while True:
                data, adrr = s.recvfrom(8192)
                received_pkgs.append(json.loads(data.decode("utf-8")))
                cnt += 1
                if time.time() - start_time > 10:
                    break
        except KeyboardInterrupt:
            pass
        end_time = time.time()
        print("received ", cnt, " packages over last",
              end_time - start_time, " seconds")
        pkg_validation_cnt = 0
        for pkg in received_pkgs:
            if pkg.get("tau_ext", False) != False and pkg.get("q", False) != False:
                pkg_validation_cnt += 1
        print(cnt - pkg_validation_cnt, " package(s) are corrupted.")
        print("unsubscribe...")
        result_2 = call_method(address, 12000, "unsubscribe_telemetry", {
                               "ip": subscriber_addr})
        if result_2["result"]["result"]:
            print("successfull unsibscribed.")
        if cnt < 1:
            print("Received no package. Test failed!")
        elif result_1["result"]["result"] and cnt - pkg_validation_cnt == 0 and result_2["result"]["result"]:
            print("\nEverything works fine :)")
        else:
            print("\nTest failed!")

    def test_telemetry_udp(address: str, subscriber_addr: str, subscriber_port: int = 12346):

        # Information about what data is being subscribed to
        print("subscribe to Telemetry_UDP with \"tau_ext\", \"q\"...")

        # This line makes a call to the server to subscribe to the telemetry topics "tau_ext" and "q"
        result_1 = call_method(address, 12000, "subscribe_telemetry",
                               {"ip": subscriber_addr, "port": subscriber_port, "subscribe": ["tau_ext", "q"]}, silent=False, timeout=7)
        # Checking if the subscription was successful, if true print a success message, else print the error
        if result_1["result"]["result"]:
            print("successfull subscribed.")
        else:
            print("Error while subscribing: ", result_1)

        # Sets up a UDP socket and binds it to the subscriber's address and port
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.bind((subscriber_addr, subscriber_port))

        # Initializes counters for the received packages and their validation
        cnt = 0
        received_pkgs = []
        start_time = time.time()
        try:
            print("\n    --Interrupt with ctrl+c--\n")

            # Receives packages for 10 seconds or until interrupted by a KeyboardInterrupt (ctrl+c)
            while True:
                data, adrr = s.recvfrom(8192)
                received_pkgs.append(json.loads(data.decode("utf-8")))
                cnt += 1
                if time.time() - start_time > 10:
                    break
        # If a KeyboardInterrupt happens, the loop is broken
        except KeyboardInterrupt:
            pass

        # Record the end time
        end_time = time.time()

        # Print out the number of received packages
        print("received ", cnt, " packages over last",
              end_time - start_time, " seconds")

        # Check the received packages for validation
        pkg_validation_cnt = 0
        for pkg in received_pkgs:
            if pkg.get("tau_ext", False) != False and pkg.get("q", False) != False:
                pkg_validation_cnt += 1
        # Print out the number of corrupted packages
        print(cnt - pkg_validation_cnt, " package(s) are corrupted.")

        # Prints to console that the function will unsubscribe from the telemetry
        print("unsubscribe...")

        # Makes a call to the server to unsubscribe from the telemetry
        result_2 = call_method(address, 12000, "unsubscribe_telemetry", {
                               "ip": subscriber_addr})

        # Check if unsubscription was successful
        if result_2["result"]["result"]:
            print("successfull unsibscribed.")

        # Final test results. If no packages were received, or the subscription, validation and unsubscription processes failed, then the test failed.
        if cnt < 1:
            print("Received no package. Test failed!")
        elif result_1["result"]["result"] and cnt - pkg_validation_cnt == 0 and result_2["result"]["result"]:
            print("\nEverything works fine :)")
        else:
            print("\nTest failed!")


def main(args=None):
    rclpy.init(args=args)

    bt_udp_node = BTUdpNode()

    rclpy.spin(bt_udp_node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    bt_udp_node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
